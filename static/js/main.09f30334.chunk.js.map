{"version":3,"sources":["Total/Total.js","App.js","reportWebVitals.js","index.js"],"names":["total","props","numExtinctSpecies","pessimist","age","className","toLocaleString","href","onClick","reset","App","state","showForm","calculate","setState","optionSelected","event","value","isNaN","target","Date","getFullYear","parseInt","optimisit","pessimistChanged","form","result","this","options","i","push","type","id","onChange","htmlFor","defaultValue","map","opt","Total","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAkBeA,EAhBD,SAAAC,GACV,IAEMC,EADkB,KADDD,EAAME,UAAY,IAAO,MAESF,EAAMG,IAE/D,OACI,sBAAKC,UAAU,kBAAf,UACI,mDAAsBH,EAAkBI,iBAAxC,YAAkE,wCAAlE,OACA,6CACA,mBAAGD,UAAU,qCAAqCE,KAAK,gCAAvD,yBACA,wBAAQF,UAAU,8BAA8BG,QAASP,EAAMQ,MAA/D,sBCqEGC,E,4MA3EbC,MAAQ,CACNP,IAAK,GACLQ,UAAU,EACVT,WAAW,G,EAGbU,UAAY,WACV,EAAKC,SAAS,CAACF,UAAU,K,EAG3BG,eAAiB,SAAAC,GACf,IAAMC,EAASC,MAAMF,EAAMG,OAAOF,OAAU,EAAKN,MAAMP,KAAM,IAAIgB,MAAOC,cAAgBC,SAASN,EAAMG,OAAOF,OAC9G,EAAKH,SAAS,CAACV,IAAKa,K,EAGtBR,MAAQ,WACN,EAAKK,SAAS,CAACV,IAAK,GAAIQ,UAAU,EAAMW,WAAW,K,EAGrDC,iBAAmB,WACjB,EAAKV,SAAS,CAACX,WAAY,EAAKQ,MAAMR,a,4CAGxC,WACE,IAAIsB,EAAO,KACPC,EAAS,KAEb,GAAIC,KAAKhB,MAAMC,SAAU,CAOvB,IALA,IAGIgB,EAAU,GAELC,EALO,KAKMA,GAJN,KAIoBA,IAClCD,EAAQE,KAAKD,GAIfJ,EACE,sBAAKpB,UAAU,kBAAf,UACE,gCACE,uBAAO0B,KAAK,WAAW1B,UAAU,mBAAmB2B,GAAG,iBAAiBC,SAAUN,KAAKH,mBACvF,uBAAOnB,UAAU,mBAAmB6B,QAAQ,iBAA5C,2BAEF,uBAAOA,QAAQ,YAAf,oCACA,yBAAQ7B,UAAU,gBAAgB2B,GAAG,UAAUC,SAAUN,KAAKZ,eAA9D,UACE,wBAAQoB,cAAY,EAApB,uBACCP,EAAQQ,KAAI,SAAAC,GAAG,OAAI,wBAAQpB,MAAOoB,EAAf,SAA+BA,GAANA,SAE/C,wBAAQhC,UAAU,qCAAqCG,QAASmB,KAAKd,UAArE,+BAMJa,EACE,cAACY,EAAD,CACAnC,UAAWwB,KAAKhB,MAAMR,UACtBC,IAAKuB,KAAKhB,MAAMP,IAChBK,MAAOkB,KAAKlB,QAIhB,OACE,qBAAKJ,UAAU,MAAf,SACE,yBAAQA,UAAU,8BAAlB,UACGoB,EACAC,W,GAtEOa,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.09f30334.chunk.js","sourcesContent":["import React from 'react'\n\nconst total = props => {\n    const extinctionRate = props.pessimist ? 0.01 : 0.001;\n    const numTotalSpecies = 2000000;\n    const numExtinctSpecies = extinctionRate*numTotalSpecies*props.age;\n\n    return (\n        <div className=\"form-group w-75\">\n            <p>You have murdered {numExtinctSpecies.toLocaleString()} species <em>so far</em>.</p>\n            <p>You monster.</p>\n            <a className=\"btn btn-dark btn-lg btn-block mt-3\" href=\"https://www.savethekoala.com/\">Save koalas</a>\n            <button className=\"btn btn-dark btn-block mt-3\" onClick={props.reset}>Back</button>\n        </div>\n\n    );\n};\n\nexport default total;","import React, { Component } from 'react';\nimport './App.css';\nimport Total from './Total/Total';\n\nclass App extends Component {\n\n  state = {\n    age: 23,\n    showForm: true,\n    pessimist: false,\n  };\n\n  calculate = () => {\n    this.setState({showForm: false});\n  }\n\n  optionSelected = event => {\n    const value = (isNaN(event.target.value)) ? this.state.age : new Date().getFullYear() - parseInt(event.target.value);\n    this.setState({age: value});\n  }\n\n  reset = () => {\n    this.setState({age: 23, showForm: true, optimisit: false});\n  }\n\n  pessimistChanged = () => {\n    this.setState({pessimist: !this.state.pessimist});\n  }\n\n  render() {\n    let form = null;\n    let result = null;\n\n    if (this.state.showForm) {\n      // generate birth years array\n      const maxYear = 2020;\n      const minYear = 1990;\n\n      let options = [];\n\n      for (let i = maxYear; i >= minYear; i--) {\n        options.push(i);\n      }\n\n      // set form\n      form = (\n        <div className=\"form-group w-75\">\n          <div>\n            <input type=\"checkbox\" className=\"form-check-input\" id=\"pessimistCheck\" onChange={this.pessimistChanged}></input>\n            <label className=\"form-check-label\" htmlFor=\"pessimistCheck\">Pessimist?</label>\n          </div>\n          <label htmlFor=\"yearField\">Enter your birth year:</label>\n          <select className=\"custom-select\" id=\"options\" onChange={this.optionSelected}>\n            <option defaultValue>Choose...</option>\n            {options.map(opt => <option value={opt} key={opt}>{opt}</option>)}\n          </select>\n          <button className=\"btn btn-dark btn-lg btn-block mt-3\" onClick={this.calculate}>Calculate</button>\n        </div>\n      );\n    }\n    else {\n      // set result\n      result = (\n        <Total \n        pessimist={this.state.pessimist}\n        age={this.state.age}\n        reset={this.reset}/>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header font-weight-bold\">\n          {form}\n          {result}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}